{"cells":[{"cell_type":"markdown","metadata":{"id":"cA75MVq5v61O"},"source":["\n","Paso_1: Cargue el archivo del masivo sms en formato CSV y las credenciales de BigQuery(la carga de credenciales debe hacerse solo una vez)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":55},"id":"809R_YeJW3DY","outputId":"49495b29-087f-4339-fc35-d05ef9c8962c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-0995e264-c977-4cc8-a1fb-324aacd07a28\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-0995e264-c977-4cc8-a1fb-324aacd07a28\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}}],"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z1KexMKhW6qy"},"outputs":[],"source":["import os\n","\n","print(os.listdir(\".\"))"]},{"cell_type":"code","source":["csv_file = 'REPORTE MAIL TARDIA ISLA 5 APP AUTOGESTION- FEBRERO 20240226_nuevo_total'  # colocar el nombre del archivo sin su extension (csv, json)"],"metadata":{"id":"NPmR2hmzCk0i"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zN21X3RAXISV"},"outputs":[],"source":["import csv\n","import json\n","import time\n","\n","def csv_to_json(csvFilePath, jsonFilePath):\n","    jsonArray = []\n","    row_types = {'cuil':int,'fecha_envio':str, 'lista':str,'email':str,'lis_id':str,'apellido':str,'empresa':str,'union':str,'descripccion':str,\n","                 'nombre':str, 'estado':str,'origen':str,'deuda':str,'opcional':str,'campa__a':str}\n","    #fechha YYYY-MM-DD usando guion\n","    #https://stackoverflow.com/questions/29019089/keep-variable-type-in-json-dump\n","    #read csv file\n","    with open(csvFilePath, encoding='utf-8') as csvf:\n","        #load csv file data using csv library's dictionary reader\n","        csvReader = csv.DictReader(csvf)\n","\n","        #convert each csv row into python dict\n","        for row in csvReader:\n","            #https://stackoverflow.com/questions/62270309/empty-cells-become-when-converting-csv-to-json-python\n","            row_converted = {key: (None if value == \"\" else row_types[key](value.strip())) for key, value in row.items()}\n","            #convert row types and trim spaces\n","            #row_converted = {k: row_types[k](v) for k, v in row.items()}\n","            #add this python dict to json array\n","            jsonArray.append(row_converted)\n","\n","    #convert python jsonArray to JSON String and write to file\n","    with open(jsonFilePath, 'w', encoding='utf-8') as jsonf:\n","        jsonString = json.dumps(jsonArray, indent=4)\n","        jsonf.write(jsonString)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8drtyU59XWFn"},"outputs":[],"source":["csvFilePath = rf'{csv_file}.csv' #AQUI AGREGAR EL PATH DEL ARCHIVO.CSV EJEMPLO : csvFilePath = r'NOMBRE_DEL_ARCHIVO.csv'\n","jsonFilePath = rf'{csv_file}.json' #AQUI AGREGAR EL PATH DEL ARCHIVO PERO CON .JSON EJEMPLO : jsonFilePath = r'NOMBRE_DEL_ARCHIVO.json'\n","\n","start = time.perf_counter()\n","csv_to_json(csvFilePath, jsonFilePath)\n","finish = time.perf_counter()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qKk0erDVXcYG"},"outputs":[],"source":["# Create BigQuery and Google Cloud Storage clients\n","\n","from google.cloud import bigquery\n","from google.cloud import storage\n","\n","client = bigquery.Client.from_service_account_json('bq-gcs-creds.json')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IuUwPt_4Xg2y","outputId":"0758a9a3-df51-4e19-cc4d-9ec8dce91139","executionInfo":{"status":"ok","timestamp":1708696470650,"user_tz":300,"elapsed":5221,"user":{"displayName":"luis angel torres carranza","userId":"02092094990488905271"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["27564\n","success\n"]}],"source":["from google.cloud import bigquery\n","import json\n","#https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-json\n","table = client.get_table(\"{}.{}.{}\".format(\"latam-recovery\", \"masivos_isla_5\", \"envios_email_historico_APP_isla_5\")) #AQUI DONDE DICE .FORMAT AGREGAR LOS DATOS DE PROYECTO-DATASET-TABLA DE BIGQUERY\n","\n","json_file = open(f'{csv_file}.json') #AQUI HAY QUE GREGAR EL NOMBRE DEL ARCHIVO.JSON EJEMPLO: json_file = open(\"NOMBRE_DEL_ARCHIVO.json\")\n","variables = json.load(json_file)\n","json_file.close()\n","#limit the number of records because bq generates connections errors with high amounts\n","chunkSize = 2000\n","print(len(variables))\n","for i in range(0, len(variables), chunkSize):\n","    x = variables[i:i + chunkSize]\n","    errors = client.insert_rows_json(table, x)\n","    if errors != []:\n","        break\n","\n","\n","if errors == []:\n","    print(\"success\")\n","else :\n","    print(errors)"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}